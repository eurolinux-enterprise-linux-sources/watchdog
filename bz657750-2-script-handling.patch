From 0fa24fd08e85a3e15e754af6a778a05568b4a752 Mon Sep 17 00:00:00 2001
From: Michael Meskes <meskes@debian.org>
Date: Fri, 21 Jan 2011 12:22:45 +0100
Subject: [PATCH 2/4] This makes the scripts in /etc/watchdog.d behave slightly differently
 while preserving upgrade compatibility for existing test/repair binary
 users.

  * Passes "test" as argv[1] / $1 for a script when it is
    being executed as a test binary.
  * Passes "repair" as argv[1] / $1 to a script to note that
    it is being called as a repair binary.

Signed-off-by: Lon Hohberger <lon@users.sourceforge.net>
---
 include/extern.h  |    2 +-
 src/test_binary.c |   17 +++++++++--------
 src/watchdog.c    |   35 +++++++++++++++++++++--------------
 3 files changed, 31 insertions(+), 23 deletions(-)

diff --git a/include/extern.h b/include/extern.h
index da81136..eade232 100644
--- a/include/extern.h
+++ b/include/extern.h
@@ -64,7 +64,7 @@ int keep_alive(void);
 int check_load(void);
 int check_net(char *target, int sock_fp, struct sockaddr to, unsigned char *packet, int time, int count);
 int check_temp(void);
-int check_bin(char *, time_t);
+int check_bin(char *, time_t, int);
 int check_pidfile(struct list *);
 int check_iface(struct list *);
 int check_memory(void);
diff --git a/src/test_binary.c b/src/test_binary.c
index b139182..9c969f9 100644
--- a/src/test_binary.c
+++ b/src/test_binary.c
@@ -65,21 +65,18 @@ static int check_processes (const char *name, time_t timeout)
     
     current = process_head;
     while (current != NULL) {
-<<<<<<< HEAD
-        if (now - current->time > timeout)
-=======
         if (!strcmp(current->proc_name, name) &&
 	      now - current->time > timeout) {
             remove_process (current->pid);
->>>>>>> 0fc6d00... This patch allows zero or more scripts/programs to be placed
             return (ETOOLONG);
+        }
         current = current->next;
     }
     return (ENOERR);
 }
 
 /* execute test binary */
-int check_bin(char *tbinary, time_t timeout)
+int check_bin(char *tbinary, time_t timeout, int version)
 {
     pid_t child_pid;
     int result, res = 0;
@@ -110,9 +107,13 @@ int check_bin(char *tbinary, time_t timeout)
 	    exit (errno);
 	if (!freopen("/var/log/watchdog/test-bin.stderr", "a+", stderr))
 	    exit (errno);
-	
-	/* else start binary */
-	execl(tbinary, tbinary, NULL);
+
+	/* now start binary */
+	if (version == 0) {
+		execl(tbinary, tbinary, NULL);
+	} else {
+		execl(tbinary, tbinary, "test", NULL);
+	}
 
 	/* execl should only return in case of an error */
 	/* so we return that error */
diff --git a/src/watchdog.c b/src/watchdog.c
index 54cfb5f..24a24f6 100644
--- a/src/watchdog.c
+++ b/src/watchdog.c
@@ -109,7 +109,7 @@ static int sync_system(int sync_it)
 }
 
 /* execute repair binary */
-static int repair(char *rbinary, int result, char *name)
+static int repair(char *rbinary, int result, char *name, int version)
 {
     pid_t child_pid;
     char parm[5];
@@ -131,11 +131,18 @@ static int repair(char *rbinary, int result, char *name)
         if (!freopen("/var/log/watchdog/repair-bin.stderr", "a+", stderr))
         	exit (errno);
 
-        /* else start binary */
-	if (name == NULL)
-		execl(rbinary, rbinary, parm, NULL);
-	else
-		execl(rbinary, rbinary, parm, name, NULL);
+        /* now start binary */
+	if (version == 0) {
+		if (name == NULL)
+			execl(rbinary, rbinary, parm, NULL);
+		else
+			execl(rbinary, rbinary, parm, name, NULL);
+	} else /* if (version == 1) */ {
+		if (name == NULL)
+			execl(rbinary, rbinary, "repair", parm, NULL);
+		else
+			execl(rbinary, rbinary, "repair", parm, name, NULL);
+	}
 
 	/* execl should only return in case of an error */
 	/* so we return the reboot code */
@@ -182,7 +189,7 @@ static int repair(char *rbinary, int result, char *name)
     return (ENOERR);
 }
 
-static void wd_action(int result, char *rbinary, char *name)
+static void wd_action(int result, char *rbinary, char *name, int version)
 {
     /* if no-action flag set, do nothing */
     /* no error, keep on working */
@@ -191,7 +198,7 @@ static void wd_action(int result, char *rbinary, char *name)
 
     /* error that might be repairable */
     if (result != EREBOOT)
-	result = repair(rbinary, result, name);
+	result = repair(rbinary, result, name, version);
 
     /* if still error, reboot */
     if (result != ENOERR)
@@ -201,15 +208,15 @@ static void wd_action(int result, char *rbinary, char *name)
 
 static void do_check(int res, char *rbinary, char *name)
 {
-    wd_action(res, rbinary, name);
-    wd_action(keep_alive(), rbinary, NULL);
+    wd_action(res, rbinary, name, 0);
+    wd_action(keep_alive(), rbinary, NULL, 0);
 }
 
 #ifdef TESTBIN_PATH
 static void do_check2(int res, char *r_specific, char *r_global, char *name)
 {
-    wd_action(res, r_specific, name);
-    wd_action(keep_alive(), r_global, NULL);
+    wd_action(res, r_specific, name, 1);
+    wd_action(keep_alive(), r_global, NULL, 0);
 }
 
 /* Self-repairing binaries list */
@@ -903,12 +910,12 @@ int main(int argc, char *const argv[])
 	    do_check(check_net(act->name, act->parameter.net.sock_fp, act->parameter.net.to, act->parameter.net.packet, tint , pingcount), rbinary, act->name);
 
 	/* in user mode execute the given binary or just test fork() call */
-	do_check(check_bin(tbinary, timeout), rbinary, NULL);
+	do_check(check_bin(tbinary, timeout, 0), rbinary, NULL);
 
 #ifdef TESTBIN_PATH
 	/* test/repair binaries in the watchdog.d directory */
 	for (act = tr_bin; act != NULL; act = act->next)
-	    do_check2(check_bin(act->name, timeout), act->name, rbinary, NULL);
+	    do_check2(check_bin(act->name, timeout, 1), act->name, rbinary, NULL);
 #endif
 
 	/* finally sleep some seconds */
-- 
1.7.2.3

